<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>clientSock = network_create_socket(network_socket_tcp);
global.clientSock = clientSock;
port = 6510;
ip = '127.0.0.1';
conn = network_connect(clientSock,ip,port);

players = ds_list_create();
chats = ds_list_create();

SendHandshake(clientSock, 'hi from client');
alarm[0] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(clientSock);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SendPing(clientSock);
alarm[0] = room_speed*5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_lobby)) {
    if (obj_lobby.readyTrigger != 0) {
        // Send ready status to server
        var readiness = obj_lobby.readiness;
        SendReady(clientSock, readiness);
        obj_lobby.readyTrigger = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get packet metadata
var n_sock = ds_map_find_value(async_load, 'id');
if (n_sock == clientSock) {
    var n_type = ds_map_find_value(async_load, 'type');
    var n_ip = ds_map_find_value(async_load, 'ip');
    var n_port = ds_map_find_value(async_load, 'port');
    
    switch (n_type) {
    case network_type_data:
        var n_buff = ds_map_find_value(async_load, 'buffer');
        var n_size = ds_map_find_value(async_load, 'size');
        buffer_seek(n_buff, buffer_seek_start, 0);
        packetType = buffer_read(n_buff, buffer_s16);
        
        // Read data depending on type
        switch (packetType) {
            case CMD_HANDSHAKE: 
                str = buffer_read(n_buff, buffer_string);
                show_debug_message('Client: '+str);
            break;
            case CMD_PLAYERS: 
                var amt = buffer_read(n_buff, buffer_s16);
                for (var i=0; i&lt;amt; i++) {
                    var playerID = buffer_read(n_buff, buffer_s16);
                    var name = buffer_read(n_buff, buffer_string);
                    var playerScore = buffer_read(n_buff, buffer_s16);
                    var ready = buffer_read(n_buff, buffer_s16);
                    a = 0;
                    
                    // Check if our list has this instance already. If not, then make a new one
                    var exists = 0;
                    for (var o=0; o&lt;ds_list_size(players); o++) {
                        if (players[|o].sockID == playerID) {
                            exists = 1;
                            show_debug_message('this one exists')
                            a = players[|o];
                        }
                    }
                    if (exists == 0) {
                        show_debug_message('doesnt exist yet')
                        a = instance_create(0,0,obj_player);
                        a.sockID = playerID;
                        ds_list_add(players, a);
                    }
                    // Apply new updates
                    a.name = name;
                    a.currentScore = playerScore;
                    a.ready = ready;
                }
            break;
            case CMD_ROOM:
                // If telling us to move to another room
                            show_debug_message('C. received room change')
                var roomTarget = buffer_read(n_buff, buffer_s16);
                var t = TransitionRoom(roomTarget);
                t.timerLimit = 60;
            break; 
            case CMD_BROADCAST:
                var msg = buffer_read(n_buff, buffer_string);
                ds_list_add(chats, msg);
                show_debug_message(msg);
            break;
        }
        
    break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
