<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>port = 6510;
server = network_create_server(network_socket_tcp, port, 2);
if (server &lt; 0) {
    show_message('Error - Could not start server. Is another server already running?');
    instance_destroy();
    game_restart();
}

// Client data
sockets = ds_list_create();  // Stores connected sockets
players = ds_map_create();  // Stores socket:instances

// Lobby settings
gameMode = 0;
scoreLimit = 5;

// Timers
updateTimerInterval = 60;
updateTimer = updateTimerInterval;

// Game instance
//game = instance_create(0,0,obj_serverGame);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>updateTimer -= 1;
if (updateTimer &lt;= 0) {
    UpdateAllPlayers();
    updateTimer = updateTimerInterval;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Receiving network event
var n_id = ds_map_find_value(async_load, 'id');
if (n_id == server) {
    var n_type = ds_map_find_value(async_load, 'type');
    var n_ip = ds_map_find_value(async_load, 'ip');
    var n_port = ds_map_find_value(async_load, 'port');    
    var n_sock = ds_map_find_value(async_load, 'socket');

    if (n_type == network_type_connect) {
        // On connect
        show_debug_message('a connection');
        // Add socket to list
        ds_list_add(sockets, n_sock);
        // Create instance for socket
        var player = instance_create(0,0,obj_serverPlayer); 
        // Add instance to map
        ds_map_add(players, n_sock, player);
    }
    else {
        // On disconnect
        show_debug_message('a disconnect');
        // Delete relevant instance, map instance, and list socket
        var inst = ds_map_find_value(players, n_sock);
        with (inst) { instance_destroy(); }
        ds_map_delete(players, n_sock);
        var index = ds_list_find_index(sockets, n_sock);
        ds_list_delete(sockets, index);
    }
}
else if (n_id == global.clientSock) {
    // Ignore if is own client
}
else {
    var n_buff = ds_map_find_value(async_load, 'buffer');
    var n_size = ds_map_find_value(async_load, 'size');
    buffer_seek(n_buff, buffer_seek_start, 0);
    packetType = buffer_read(n_buff, buffer_s16);
    
    // Read data depending on type
    switch (packetType) {
        case CMD_PING:
            show_debug_message('ping received');
        break;
        case CMD_HANDSHAKE: 
            str = buffer_read(n_buff, buffer_string);
            show_debug_message('Server: '+str);
            SendHandshake(n_id, 'Roger that');
            UpdateAllPlayers();
        break;
        case CMD_READY:
            var a = ds_map_find_value(players, n_id);
            a.ready = buffer_read(n_buff, buffer_s8);
            UpdateAllPlayers();
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
